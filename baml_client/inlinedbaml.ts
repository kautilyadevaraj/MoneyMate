/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomAI {\r\n  provider openai-generic\r\n  options {\r\n    base_url \"https://api.groq.com/openai/v1\"\r\n    api_key env.GROQ_API_KEY\r\n    model \"llama3-70b-8192\"\r\n  }\r\n}\r\n\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.206.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "prompts.baml": "// Defining a data model.\r\nclass Transaction {\r\n  date string\r\n  transaction_id string\r\n  name string\r\n  type string\r\n  amount int\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractTransactions(transaction: string) -> Transaction[] {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client CustomAI // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    You are a data extraction tool. Your sole purpose is to extract structured data from the given text.\r\n    Do not generate any code, explanations, or any text other than the required JSON output.\r\n    Your task is to analyze a PDF file that contains financial transactions.\r\n    Always output the result in strict JSON format without any extra commentary.\r\n\r\n    Rules\r\n\r\n    Only accept PDF files.\r\n\r\n    If the input is not a PDF, return:\r\n\r\n    {\r\n      \"error\": \"Unsupported file type. Only PDF is allowed.\"\r\n    }\r\n\r\n\r\n    Validate PDF contents:\r\n\r\n    If the PDF does not contain transactions, return:\r\n\r\n    {\r\n      \"error\": \"Invalid file. No transactions found.\"\r\n    }\r\n\r\n\r\n    If valid, extract for each transaction:\r\n\r\n    date → Date of transaction (YYYY-MM-DD if possible)\r\n\r\n    transaction_id → Unique ID/reference number (string)\r\n\r\n    name → Payee/Payer or description (string)\r\n\r\n    type → \"credit\" or \"debit\"\r\n\r\n    amount → Numeric value (no currency symbols, only number)\r\n\r\n    Return an array of transaction objects directly.\r\n\r\n    Here is an example of how to extract data from a markdown table:\r\n\r\n    Input:\r\n    | Date       | Transaction ID          | Name                     | Type   | Amount  |\r\n    | ---------- | ----------------------- | ------------------------ | ------ | ------- |\r\n    | 20-03-2024 | T4664425072181898970988 | JUSTVEND PRIVATE LIMITED | Credit | 1786.94 |\r\n    | 10-05-2024 | T7072788910002864906183 | IRCTC                    | Credit | 1736.06 |\r\n\r\n    Output:\r\n    [\r\n      {\r\n        \"date\": \"2024-03-20\",\r\n        \"transaction_id\": \"T4664425072181898970988\",\r\n        \"name\": \"JUSTVEND PRIVATE LIMITED\",\r\n        \"type\": \"Credit\",\r\n        \"amount\": 1786\r\n      },\r\n      {\r\n        \"date\": \"2024-05-10\",\r\n        \"transaction_id\": \"T7072788910002864906183\",\r\n        \"name\": \"IRCTC\",\r\n        \"type\": \"Credit\",\r\n        \"amount\": 1736\r\n      }\r\n    ]\r\n\r\n    Now, extract the transactions from this markdown:\r\n    {{ transaction }}\r\n\r\n    Output Schema\r\n    [\r\n      {\r\n        \"date\": \"YYYY-MM-DD\",\r\n        \"transaction_id\": \"string\",\r\n        \"name\": \"string\",\r\n        \"type\": \"credit | debit\",\r\n        \"amount\": number\r\n      }\r\n    ]\r\n\r\n\r\n    The agent should never output anything except data in the form of the Output Schema (either the extracted structure or an error JSON).\r\n    NOTE: Always ensure the output is valid Output schema no code direct value.\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n// // Test the function with a sample resume. Open the VSCode playground to run this.\r\n// test vaibhav_resume {\r\n//   functions [ExtractResume]\r\n//   args {\r\n//     resume #\"\r\n//       Vaibhav Gupta\r\n//       vbv@boundaryml.com\r\n\r\n//       Experience:\r\n//       - Founder at BoundaryML\r\n//       - CV Engineer at Google\r\n//       - CV Engineer at Microsoft\r\n\r\n//       Skills:\r\n//       - Rust\r\n//       - C++\r\n//     \"#\r\n//   }\r\n// }\r\n",
}
export const getBamlFiles = () => {
    return fileMap;
}